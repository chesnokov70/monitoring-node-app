pipeline {
    agent any

    environment {
        // Укажите ваши переменные окружения
        DOCKER_IMAGE = 'your-dockerhub-username/your-app'
        DOCKER_TAG = "${GIT_COMMIT}"
        DOCKER_REGISTRY = 'docker.io' // Используйте свой реестр, если необходимо
        TELEGRAM_TOKEN = 'your-telegram-bot-token'
        TELEGRAM_CHAT_ID = 'your-chat-id'
        VM_IP = 'your-vm-ip'
        VM_USER = 'your-vm-username'
        VM_PRIVATE_KEY_PATH = '/path/to/your/private/key.pem'
        APP_CONTAINER_NAME = 'your-app-container'
        NGINX_CONTAINER_NAME = 'nginx'
    }

    stages {
        stage('Checkout') {
            steps {
                // Получаем код из репозитория
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Сборка Docker-образа
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Авторизация в Docker Hub или вашем реестре
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'

                    // Пуш Docker-образа в реестр
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Deploy to VM') {
            steps {
                script {
                    // Деплой Docker-образа на ВМ
                    sh """
                        ssh -i ${VM_PRIVATE_KEY_PATH} ${VM_USER}@${VM_IP} "
                            docker pull ${DOCKER_IMAGE}:${DOCKER_TAG} &&
                            docker stop ${APP_CONTAINER_NAME} || true &&
                            docker rm ${APP_CONTAINER_NAME} || true &&
                            docker run -d --name ${APP_CONTAINER_NAME} -p 80:80 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    """
                }
            }
        }

        stage('Notify Telegram') {
            steps {
                script {
                    // Отправка уведомления в Telegram о результате сборки
                    def message = "Build of ${DOCKER_IMAGE}:${DOCKER_TAG} completed successfully."
                    if (currentBuild.result == 'FAILURE') {
                        message = "Build of ${DOCKER_IMAGE}:${DOCKER_TAG} failed."
                    }

                    sh """
                        curl -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage \
                        -d chat_id=${TELEGRAM_CHAT_ID} \
                        -d text="${message}"
                    """
                }
            }
        }

        stage('Collect Logs') {
            steps {
                script {
                    // Сбор логов с контейнера приложения и Nginx
                    sh """
                        ssh -i ${VM_PRIVATE_KEY_PATH} ${VM_USER}@${VM_IP} "
                            docker logs ${APP_CONTAINER_NAME} > app_logs.txt &&
                            docker logs ${NGINX_CONTAINER_NAME} > nginx_logs.txt"
                    """
                }
            }
        }
    }

    post {
        always {
            // Очистка ресурсов, если необходимо
        }
    }
}
